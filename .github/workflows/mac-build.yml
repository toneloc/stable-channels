name: Desktop Build – Mac

on:
  push:
    branches: [sc-lsp]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-macos:
    runs-on: macos-14   # Apple‑silicon runner

    env:
      APP_PATH: "dist/Stable Channels.app"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2

      - uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          override: true

      # Build universal .app with embedded script
      - name: Build universal .app
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          APP_NAME="Stable Channels"
          APP_BUNDLE="${APP_NAME}.app"
          IDENTIFIER="com.yourcompany.stablechannels"
          VERSION="0.1.0"
          BIN_NAME="stable-channels"
          WRAPPER_NAME="$APP_NAME"
          PNG_ICON="sc-icon-egui.png"
          ICNS_NAME="AppIcon.icns"

          echo "▶ Installing targets…"
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

          echo "▶ Building release binaries…"
          cargo build --release --bin "$BIN_NAME" --target aarch64-apple-darwin
          cargo build --release --bin "$BIN_NAME" --target x86_64-apple-darwin

          echo "▶ Creating universal binary…"
          mkdir -p target/universal/release
          lipo -create \
            -output "target/universal/release/${BIN_NAME}" \
            "target/aarch64-apple-darwin/release/${BIN_NAME}" \
            "target/x86_64-apple-darwin/release/${BIN_NAME}"

          xcrun strip -x "target/universal/release/${BIN_NAME}"
          
          ICON_PLIST_SNIPPET=""
          if [[ -f "$PNG_ICON" ]]; then
            echo "▶ Converting $PNG_ICON → ${ICNS_NAME}…"
            TMP_DIR="$(mktemp -d)/icon.iconset"
            mkdir "$TMP_DIR"
            for sz in 16 32 64 128 256 512 1024; do
              sips -z "$sz" "$sz"   "$PNG_ICON" --out "$TMP_DIR/icon_${sz}x${sz}.png"        >/dev/null
              sips -z $((sz*2)) $((sz*2)) "$PNG_ICON" --out "$TMP_DIR/icon_${sz}x${sz}@2x.png" >/dev/null
            done
            iconutil --convert icns "$TMP_DIR" --output "${ICNS_NAME}"
            rm -rf "$TMP_DIR"
            ICON_PLIST_SNIPPET="
              <key>CFBundleIconFile</key> <string>${ICNS_NAME}</string>
              <key>CFBundleIconFiles</key> <array><string>${ICNS_NAME}</string></array>"
          else
            echo "⚠️  $PNG_ICON not found – building without custom icon."
          fi

          echo "▶ Assembling .app bundle…"
          rm -rf "$APP_BUNDLE"
          mkdir -p "$APP_BUNDLE/Contents/MacOS" "$APP_BUNDLE/Contents/Resources"

          cp "target/universal/release/${BIN_NAME}" "$APP_BUNDLE/Contents/MacOS/"
          cat >"$APP_BUNDLE/Contents/MacOS/${WRAPPER_NAME}" <<'SH'
          #!/usr/bin/env bash
          DIR="$(cd "$(dirname "$0")" && pwd)"
          exec "$DIR/stable-channels" user
          SH
          chmod +x "$APP_BUNDLE/Contents/MacOS/${WRAPPER_NAME}"

          [[ -f "${ICNS_NAME}" ]] && cp "${ICNS_NAME}" "$APP_BUNDLE/Contents/Resources/${ICNS_NAME}"

          cat >"$APP_BUNDLE/Contents/Info.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleName</key>           <string>${APP_NAME}</string>
            <key>CFBundleDisplayName</key>    <string>${APP_NAME}</string>
            <key>CFBundleIdentifier</key>     <string>${IDENTIFIER}</string>
            <key>CFBundleVersion</key>        <string>${VERSION}</string>
            <key>CFBundlePackageType</key>    <string>APPL</string>
            <key>CFBundleExecutable</key>     <string>${WRAPPER_NAME}</string>
            ${ICON_PLIST_SNIPPET}
            <key>LSMinimumSystemVersion</key> <string>10.13</string>
          </dict></plist>
          PLIST

          mkdir -p dist
          mv "$APP_BUNDLE" dist/
          echo "✅  ${APP_BUNDLE} built (universal; icon = ${ICNS_NAME:-none})."

      # Codesign & notarize (safe secrets check)
      - name: Codesign & notarize
        if: ${{ env.HAS_MAC_SECRETS == 'true' }}
        env:
          HAS_MAC_SECRETS: ${{ secrets.DEV_ID_CERT_P12 && secrets.ASC_KEY_P8 && 'true' || 'false' }}
          P12_B64:       ${{ secrets.DEV_ID_CERT_P12 }}
          P12_PASS:      ${{ secrets.DEV_ID_CERT_PASS }}
          ASC_KEY_P8:    ${{ secrets.ASC_KEY_P8 }}
          ASC_KEY_ID:    ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        run: |
          echo "$P12_B64" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "$P12_PASS" -T /usr/bin/codesign
          CODESIGN_ID=$(security find-identity -v -p codesigning build.keychain | awk '{print $2}')
          codesign --options runtime --timestamp -f -s "$CODESIGN_ID" "$APP_PATH"
          echo "$ASC_KEY_P8" | base64 --decode > key.p8
          xcrun notarytool submit "$APP_PATH" \
               --key key.p8 --key-id "$ASC_KEY_ID" --issuer "$ASC_ISSUER_ID" --wait
          xcrun stapler staple "$APP_PATH"
          rm -f cert.p12 key.p8

      - name: Zip .app
        run: |
          ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" Stable-Channels-mac.zip

      - uses: actions/upload-artifact@v4
        with:
          name: stable-channels-mac
          path: Stable-Channels-mac.zip
          if-no-files-found: error
